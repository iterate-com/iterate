name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Check user permissions
        id: check_permissions
        run: |
          USER="${{ github.event.comment.user.login || github.event.review.user.login || github.event.issue.user.login }}"
          PERMISSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/collaborators/$USER/permission" | jq -r '.permission')
          echo "User: $USER"
          echo "Permission level: $PERMISSION"
          echo "permission=$PERMISSION" >> $GITHUB_OUTPUT
          if [[ "$PERMISSION" == "admin" || "$PERMISSION" == "write" || "$PERMISSION" == "maintain" ]]; then
            echo "User has write access"
            exit 0
          else
            echo "User does not have write access"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Fetch secrets from Doppler
        id: doppler
        run: |
          echo "ANTHROPIC_API_KEY=$(doppler secrets get ANTHROPIC_API_KEY --plain)" >> $GITHUB_OUTPUT
        env:
          DOPPLER_TOKEN: ${{ secrets.CLAUDE_DOPPLER_TOKEN }}

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ steps.doppler.outputs.ANTHROPIC_API_KEY }}
          assignee_trigger: "claude-bot"
          settings: |
            {
              "env": {
                "DOPPLER_TOKEN": "${{ secrets.CLAUDE_DOPPLER_TOKEN }}"
              }
            }
          prompt: "Review this PR for security issues, bugs, and code quality. Proactively fix unchecked type casts, or unfixable linter issues."
          claude_args: |
            --model claude-sonnet-4-5-20250929
          allowed_tools: |
            Bash(pnpm i) 
            Bash(pnpm test:*)
            Bash(pnpm eval:*)
            Bash(pnpm lint)
            Bash(pnpm typecheck)
            Bash(pnpm clean)
            Bash(pnpm dev)
